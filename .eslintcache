[{"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/index.tsx":"1","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/App.tsx":"2","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/ContentWrapper.tsx":"3","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/SearchBox.tsx":"4","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/APIKEY.js":"5","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/WeatherCard.tsx":"6","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/dateEnums.ts":"7"},{"size":219,"mtime":1610557857603,"results":"8","hashOfConfig":"9"},{"size":526,"mtime":1611236131439,"results":"10","hashOfConfig":"9"},{"size":3805,"mtime":1611255851608,"results":"11","hashOfConfig":"9"},{"size":1215,"mtime":1611255953540,"results":"12","hashOfConfig":"9"},{"size":11883,"mtime":1610572935041,"results":"13","hashOfConfig":"9"},{"size":2516,"mtime":1611253591942,"results":"14","hashOfConfig":"9"},{"size":296,"mtime":1611228449788,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qztcvz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/index.tsx",[],["34","35"],"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/App.tsx",[],"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/ContentWrapper.tsx",["36"],"import React, { useState, useEffect } from \"react\";\nimport \"./ContentWrapper.css\";\nimport { SearchBox } from \"./SearchBox\";\nimport axios from \"axios\";\nimport APIKEY from \"./APIKEY\";\nimport { WeatherCard } from \"./WeatherCard\";\nimport { Temp } from \"./tempInterface\";\n\nconst apiKey = APIKEY.key;\nconst cityKey = \"localstorageCityKeyReactWeatherAPI\";\n\nconst locUrl = \"http://dataservice.accuweather.com/locations/v1/cities/search\";\nconst currentUrl = (locKey: string) =>\n  `http://dataservice.accuweather.com/currentconditions/v1/${locKey}`;\n\ninterface ContentWrapperProps {\n  setParentState: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface CurrentWeather {\n  IsDayTime: boolean;\n  LocalObservationDateTime: string;\n  WeatherIcon: number;\n  WeatherText: string;\n  Temperature: Temp;\n}\n\nexport const ContentWrapper: React.FC<ContentWrapperProps> = ({\n  setParentState,\n}) => {\n  const [curInfo, setCurInfo] = useState<CurrentWeather>({\n    IsDayTime: true,\n    LocalObservationDateTime: \"\",\n    WeatherIcon: 0,\n    WeatherText: \"\",\n    Temperature: {\n      Metric: {\n        Value: 0,\n        Unit: \"\",\n        UnitType: 0,\n      },\n      Imperial: {\n        Value: 0,\n        Unit: \"\",\n        UnitType: 0,\n      },\n    },\n  });\n\n  const [city, setCity] = useState(() => {\n    const savedCity = localStorage.getItem(cityKey);\n    if (savedCity) {\n      return savedCity;\n    }\n\n    return \"\";\n  });\n\n  useEffect(() => {\n    setParentState(curInfo.IsDayTime);\n  }, [curInfo, setParentState]);\n\n  const formatCityString = (input: string) => {\n    let output = \"\";\n    input.split(\" \").forEach((word) => {\n      output += word.charAt(0).toUpperCase() + word.slice(1) + \" \";\n    });\n\n    return output;\n  };\n\n  useEffect(() => {\n    if (city) {\n      getCurrentWeather(city);\n    }\n  }, []);\n\n  const wrapperClasses =\n    \"content-wrapper \" + (curInfo.IsDayTime ? \"day\" : \"night\");\n\n  const getCurrentWeather = (text: string): void => {\n    setCity(formatCityString(text));\n    localStorage.setItem(cityKey, formatCityString(text));\n\n    let locactionKey: string;\n    let dataObject: CurrentWeather;\n\n    axios\n      .get(locUrl, {\n        params: {\n          apikey: apiKey,\n          q: text,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          locactionKey = response.data[0].Key;\n\n          return axios.get(currentUrl(locactionKey), {\n            params: {\n              apikey: apiKey,\n            },\n          });\n        }\n      })\n      .then((response) => {\n        if (response && response.data) {\n          dataObject = (({\n            IsDayTime,\n            LocalObservationDateTime,\n            WeatherIcon,\n            WeatherText,\n            Temperature,\n          }) => ({\n            IsDayTime,\n            LocalObservationDateTime,\n            WeatherIcon,\n            WeatherText,\n            Temperature,\n          }))(response.data[0]);\n\n          setCurInfo(dataObject);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className={wrapperClasses}>\n      <h1>React Weather App</h1>\n      <h3>\n        Powered by{\" \"}\n        <a\n          href=\"https://developer.accuweather.com/\"\n          title=\"Go to AccuWeather API\"\n        >\n          AccuWeather\n        </a>\n      </h3>\n      <SearchBox onClick={getCurrentWeather} initialInput={city} />\n      {curInfo.WeatherText ? (\n        <WeatherCard\n          searchedCity={city}\n          localObservationDateTime={curInfo.LocalObservationDateTime}\n          weatherIcon={curInfo.WeatherIcon}\n          weatherText={curInfo.WeatherText}\n          temperature={curInfo.Temperature}\n        />\n      ) : (\n        <div className=\"noCard\">\n          Enter a city to see the current weather there.\n        </div>\n      )}\n    </div>\n  );\n};\n","/home/bram/Documents/React-projects/react-typescript-weatherapp/src/SearchBox.tsx",[],"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/APIKEY.js",[],["37","38"],"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/WeatherCard.tsx",[],"/home/bram/Documents/React-projects/react-typescript-weatherapp/src/dateEnums.ts",[],["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":76,"column":6,"nodeType":"47","endLine":76,"endColumn":8,"suggestions":"48"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"41","replacedBy":"49"},{"ruleId":"43","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'city' and 'getCurrentWeather'. Either include them or remove the dependency array.","ArrayExpression",["53"],["51"],["52"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [city, getCurrentWeather]",{"range":"56","text":"57"},[1793,1795],"[city, getCurrentWeather]"]